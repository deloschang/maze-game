* Maze Game
Description: a client application that simulates you and your friends 
searching for each other in a maze that is generated and managed by a 
separate server application

See Design Document PDF for more details

TO RUN -->
    - run "make" 
    - run AMStartup which will start the avatar clients
        - e.g. ./AMStartup -n 3 -d 3 -h stratton.cs.dartmouth.edu for 3 Avatars on Difficulty 3
* Note
    - Results/ contains all the logs 
    - Utils/ contains the LIBRARY and the mutual .c and .h files for better refactoring
    - In the graphics, it *appears* that the Avatar is jumping multiple spots at a time, 
        Or jumping the "wall". This is not a pathing error.
        But this is because the processes are running faster than the graphics renders them 
        due to the relatively slow UPDATE_INTERVAL (1 sec). 

    - When the maze is solved, it will output a "Maze Solved !!" message ALONG
        with the 2D char array representing the currently solved maze. 
        - When the maze is SOLVED, the Avatars will not completely overlap. They will be next to each other.
            This was our design decision because it makes it easier to see where the avatars were solved.


* Graphics
To run gtk: gcc -Wall -g helloworld.c -o helloworld `pkg-config --cflags gtk+-2.0 --libs gtk+-2.0`
To run with X11 forwarding (to enable graphics): ssh -Y -l user@server 

File Directory:
├── amazing_client.c
├── amazing_client.h
├── amazing.h
├── AMStartup.c
├── AMStartup.h
├── bfs.c
├── cleansharedmem.sh
├── graphics.c
├── graphics.h
├── header.h
├── Makefile
├── mazedesign.pdf
├── README
├── results
│   ├── Amazing_dfchang_2_0.log
│   ├── Amazing_dfchang_3_3.log
│   ├── Amazing_dfchang_4_3.log
│   ├── Amazing_dfchang_4_6.log
│   ├── Amazing_dfchang_5_3.log
│   ├── Amazing_dfchang_5_5.log
│   └── Amazing_dfchang_9_3.log
├── sem1.c
├── semun.h
└── unit_test.c

File Descriptions:
amazing_client.c :  main file for interacting with the server and getting received messages. 
                    Updates the shared map between all the avatars and calls the algorithm
bfs.c            :  main algorithm using the modified BFS to calculate the direction to move
graphics.c       :  main function for updating the graphics using the shared map
sem1.c           :  main file for accessing semaphore methods etc.
unit_test.c      :  unit testing file 

Extra Credit Option:
 * Interprocess communication -- we are using shared memory and semaphores

 
